* Switch to VS Code for AHK dev * :
	✔ AHK-based features to bring over: @done(22-11-23 13:59)
		✔ Look into OutputDebug command for debugging stuff - prints to the debugger console @done(22-11-23 13:59)
		✔ Editing stuff in notepad++ (editFiles TLS, +e selector option, etc.) @done(22-11-23 13:59)
			Some of this is probably just a question of changing the default editor for TL/TLS files
	Update extension to enhance stuff for me:
		☐ Figure out how to build extension with my own changes
			✔ Running from source @done(22-11-03 12:19)
			☐ Compile to install on other machines
		☐ Finding definitions
			A lot of this works out of the box, but could I extend it to the more special cases?
			Looks like this probably lives (or should live) in defProvider?
			Pieces that we don't seem to be handling well:
				✔ Better inheritance? (ActionObjectBase?) @done(22-11-03 12:18)
					Actually this is working fine - we're just hitting the multiple-matches issue.
				☐ Properties (i.e. blah[])
				☐ Multiple method matches (by name) - we just return the first, could we return multiple options?
				☐ #Include'd files in other directories
					Actually, this works fine if I include the full %A_LineFile%\..\ for the current directory
						i.e. ..\base\actionObjectBase.ahk => %A_LineFile%\..\..\base\actionObjectBase.ahk (adding %A_LineFile%\..\)
				☐ Special string/object/array bases
		☐ Intellisense
			The only built-in support is for a one-line comment above functions, not enough for me.
			✔ Pull in entire header like notepad++ did @done(22-10-27 13:35)
				Dynamically, that is (not via a compiled file, so it has trouble if it can't find the definition!)
			☐ Would be nicer to trim it down to the useful bits only?
				<DESCRIPTION>
				
				<NOTES>

				\- Param (I,REQ) - description
				
				SIDE EFFECTS: <SIDE EFFECTS>
			☐ @GROUP handling
			☐ If I get really deep into parsing headers for parameters, signatureProvider looks like the place to implement that.
		☐ Custom syntax highlighting (for my custom classes)
	☐ Get rid of updateNotepadPPSupport once I'm sure I won't need it anymore (currently shows how to parse my headers and such).

* Fixes / Cleanup * :
	☐ TableList mods - review how we handle multiple mods - for example, it would be nice if when there's multiple .defaultTo options, the most specific (deepest, last) one wins?
	☐ F2 for ***s
		☐ Outlook: this works, as long as AHK is _not_ running as admin
			myFindObjOutlook := ComObjActive("Outlook.Application").ActiveInspector.WordEditor.Application.Selection.Find
			myFindObjOutlook.Wrap := 1
			myFindObjOutlook.Execute("***") ; For Outlook
		☐ Word: could we do something similar to above?
	☐ Should I just add "FileEncoding, UTF-8" to my common script as well? Is there any instance where we _don't_ want that in place?
	☐ notesHelper - make superscript stuff work when I'm adding it onto the beginning of a word, too (right now it loses the subscript)
		Best route is probably clipboard manipulation?
			Good starting points:
				WinClip (https://www.autohotkey.com/board/topic/74670-class-winclip-direct-clipboard-manipulations)
				SetClipboardData (https://www.autohotkey.com/board/topic/7692-setclipboarddata-and-getclipboarddata-functions/) should be good starting points.
	☐ Does fixVDIDisplaySettings.ahk still work, and is it useful? Should we just get rid of it?
	☐ Is regeditToKey moot now? Can't we do something like this directly with regedit itself now?
	☐ Could we centralize the !w/!e hotkeys a little better?
		☐ Maybe a have a central object where the various windows could somehow register that they get the title/EpicRecord in a certain way (BoundFunc-style)?
		☐ Or, *even more simply*: maybe just a switch statement in the main hotkey function that checks which window is active
			☐ Could still have the _code_ live in the respective window's class, just a switch on window name/type
				☐ Should this just be a generic mapping, then?
					Active window name => class reference
					getNamedWindowClass(name).funcName
						☐ Will this crash if getNamedWindowClass returns ""/nothing?
							☐ If so, can I handle it with AHKv1 try/catch stuff?
					askNamedWindowToDo(actionConstant, moreInfoObj)
		☐ Could we do the same thing with my various copy (title/ID/code location) hotkeys?
	☐ Could we clean up/condense Teams messages so I can paste them into OneNote more nicely?
		✔ Initial working draft @done(23-02-10 15:14)
		☐ Handle quotes better
			☐ Maybe recognize that it starts with a name, then compare the rest of the line to the lines I've already processed with that name?
			☐ Reformat like this:
				Gavin Borg | maybe convert the DAT to episodes in SetConsumerSpecificInputs^LNUORDDBCAssoc and add it to "AdditionalEpisodes" array there |
		☐ Could we make selecting/copying a long conversation better?
			☐ Maybe trigger it, then build up a buffer with each copy, then condense?
				☐ Could show the last line in the buffer (ideally including the timestamp!) to make it easier to track your spot
		☐ Could we get it to also keep images? Those are dropped right now.
		☐ Can we at least handle the message after an image? We're not extracting the sender name properly in that case.
	☐ Should we move source\common\base? Currently contains these:
		Ancestors of classes
			☐ Would these make more sense in a subfolder under class\, or even just as part of class\ itself?
				Most are really only used by classes in that folder
		StringBase/ArrayBase/ObjectBase
			☐ These kind of make sense here, but if we're moving the others these should probably find a new home too.
	☐ Consider renaming ActionObject to something more like ActionObjectRedirector (as it is it sounds like ActionObjectBase, but it's really just a redirector)
	☐ Formatted list handling custom delimiter
		☐ Consider supporting a custom delimiter on input side as well?
			☐ Would need to handle it in determineListFormat() and onward, probably have to store it off somewhere
				☐ Maybe wrap the list array in an object with an extra property?
		☐ Consider an augmented version for M use (so I could enter ^ and get an actual delimiter of _"^"_)
	☐ Formatted list handling - would it make sense to move delimiters into the TLS? That way the delimiter is just passed around for everything
		☐ Main question is whether all formats will fit into that well enough - OneNote columns (with its custom sending logic) is the biggest question
			☐ Then again, if that one is special already does it actually matter?
	☐ Figure out why escape-closing stops working after long enough
		! On hold until I convert over to AHKv2 - I suspect it will resolve a lot of things like this (or eliminate the need for them).
		Initial digging:
			Happens to Telegram for sure, but also Explorer?
			Based on debug toasts, I'm pretty sure it's no longer identifying windows by name properly - probably some sort of local variable gets dumped or overwritten?
			Next step: add some sort of debug flag or something to try and see what's missing/going on in Config
				Or: system.ahk::testFunc()
				
					---------------------------
					main.ahk
					---------------------------
					titleString=A
					exe=C:\Users\gborg\AppData\Roaming\Telegram Desktop\Telegram.exe	|	bestMatch.exe=Telegram.exe
					class=Qt5154QWindowIcon															|	bestMatch.class=Qt5154QWindowIcon
					title=Telegram (1)																|	bestMatch.title=
					bestMatch.name=Telegram
					(Config.windows)["Telegram"].name=Telegram
					---------------------------
					OK   
					---------------------------
					
				Next: try debug flag of sorts again, so that we can try it with the "this" references in place
			The "this" usages are my biggest suspect right now - from attached debugging, all of the members appear to be in place otherwise.
		Update 12/13/22:
			Seems like we're not actually triggering the HOTKEY at all - or at least, we're not getting into Config.findWindowInfo()
				I CAN get it to happen by getting a toast to appear (presumably because of how we identify toasts) using chrome.ahk's ctrl+right-click copy-link hotkey
			Notably, we do have this.windows["Telegram"] as an object (at least, the .name property is populated and coming thru fine)
				So "this" (at least in the context I was thinking) is NOT the culprit.
			Added another hotkey (^+!9) to force Config.findWindowInfo() to trigger so we can better see what's going on there.
			Also added a MsgBox (when debug is toggled on) to the actual Esc hotkey.

* New Features / Scripts * :
	☐ Add a hotkey that just toasts the name + ID of the EMC2 record (if any)
		Alt+/ (conceptually Alt+?), maybe?
		Would need either EMC2summary scraping from below, or whatever equivalent thing I end up doing with track shadow reports
	☐ Grab EMC2 objects' titles when needed by scraping EMC2summary pages with HTTPRequest
		Working prototype in test.ahk.
		☐ Cleaner method: use a track-shadow report, like Link Magic does: https://wiki.epic.com/main/Testing_Tools/AutoHotkey/Scripts/Link_Magic#Sherlock_Support_Logs
			Report basically returns starting/ending comment tags around the actual return value, AHK calls it via WinHTTPRequest.
			☐ Existing "GenericShadowReport" option just takes a tag and returns the value - could use that and write the $$geti or whatever into the URL
				Example of how to do that: F:\EPIC\AutoHotKey\Experimental\mnaeger\Lib\TrackShadow.ahk
			☐ Or, write my own "get track record name" that uses nicer display names and defaults back to $$znam if needed
			☐ With this, I could also expand handling for OneNote EMC2 record lines - can pull QAN + XDS + DLG and link them all (maybe even in the order I'd like based on record status!)
		Potential use cases:
			epicLib.ahk::getUsefulEMC2RecordWindows() < epic.ahk::sendEMC2RecordID()
				Pull in titles from more windows (watch performance here!)
				Can turn ignoreIfNoTitle into a flag for getting any missing titles
				Or, alternative idea: drop ignoreIfNoTitle flag, but wait to retrieve title until after specific record has been picked
			epicLib.ahk::getBestEMC2RecordFromText()
				Only grabbing one object, so grabbing a missing title makes sense
					Probably make it optional, though - probably an opt-in flag
				Would mean that ActionObjectEMC2 needs to grab it itself less often (but still need to when given INI + ID but not title)
			Standard EMC2 object string - automatically pull in title if missing
			epic.ahk::selectOutlookTLG()
			TLG selector - get smarter about pulling in a usable record (if I'm pulling from an XDS, look for a DLG or at least PRJ to use instead)
			AHK SU TLS lines - trigger via AHK
				Prompt with search for adding to Thunder (automatically copy to clipboard)
					Maybe even just wait to see the "Find an Environment" window and select the environments itself? (don't actually accept because wording could change)
				Grab needed data via track-shadow report, do the rest of the current AHK stuff
				Display info about what to rename Thunder environments (maybe put the common base onto the clipboard for me)
				Display new line to add to getSyncEnvironments (automatically add to clipboard)
	☐ Consider adding "chorded" EMC2 object opening keys (at least when opening in web, so all of these start with !w)?
		☐ What's the actual workflow for this case, then?
			Don't want to wait when I just want the object to open
			Maybe a toast-based, non-blocking "panel" that can be triggered with individual character keys (b for objects, h for history, i for issues, etc.)?
				Could also allow triggering the "panel" manually in Chrome, or not re-opening-in-web if Chrome is already focused and has object open?
			Maybe always open the DLG, then try to close the extra tab before opening the new one (if we are opening a new one)?	
		Use cases:
			☐ Issues (i)
			☐ Revisions (r)
			☐ Designs (x) - probably a selector if multiple found (would require track-shadow querying too)
			☐ QANs (q) - probably a selector if multiple found (would require track-shadow querying too)
			☐ More?
	☐ Add newline character display (`n and `r) to debug table
	☐ Performance improvement idea: could I "compile" the titleStrings for activating/identifying windows down to a simple object in Config, instead of having to call a function every time?
	☐ Consider revamping AHK function headers:
		☐ Consider getting rid of NOTES bit of headers - just include it in the description instead.
		☐ Consider ditching the REQ/OPT for parameters - you can tell that easily from the signature.
		☐ Consider ditching the I/O for parameters too, just make it obvious in the description
		☐ Maybe we should switch over to a more jsdoc-like style?
	☐ Consider hotstrings or something similar for Ninpo notes style
		☐ Probably overkill, but could add a selector of techniques/stances/etc. (that includes super/subscripting)
			Maybe not overkill? Could be a nice quick reference for abbreviations.
		☐ Maybe a quick text-popup display of syntax/abbreviations?
	☐ ActionObject: consider a "could be" sort of sense for filtering which things an input is
		For example, something with a "^" could go to either EpicStudio or CodeSearch
		Alternatively, group like inputs together in one merged class
			Keep ActionObjectEpicStudio for DLG case? Or maybe move into a special case of ActionObjectEMC2 instead?
			EpicStudio database code + CodeSearch database code + CodeSearch client code => ActionObjectCodeLocation?
	☐ ActionObjectCodeSearch client: there's also a "Directory path" search field now that I might be able to use?
		Interesting idea: if multiple files with same name, look thru file tree in Stage 1 and present Selector of the options?
	☐ Could we make linking hotkey more reliable by generating an (RTF?) link on the clipboard and pasting it, rather than relying on the linking popups?
		Might only work in certain contexts.
		Clipboard stuff in work downloads does this, check that out.
	☐ SelectorGui is very slow lately - could we speed it up somehow?
		Might be a question of switching to built-in Gui positioning options as mentioned below?
	☐ ActionObject: would it make sense to always compare the "first word" of the given value to the TLS?
		Would make stuff like the helpdesk and SVN handling work without needing a separate function
			SVN handling in particular would be nicer because we can get the repo URL from the TLS instead of having to get it out of privates.
		Potentially tricky bit: pre-processing we do for EMC2 records (with their additional title and whatnot)
			We could theoretically just run that a second time, though.
	☐ Could I use hotstrings to about stuff like (i.e. xxx) from capitalizing incorrectly?
	☐ Consider a "record macro" set of hotkeys (like Notepad++ has built-in).
	☐ Is there some way I could detect and show a warning when a modifier key gets stuck down?
		Maybe start a timer when one of them is held down, and after 5s or so show a persistent toast that goes away when it's released?
		Could take the physical vs. virtual state into account (GetKeyState(key) vs GetKeyState(key, "P")) - only care when virtually but not physically held
	☐ Consider adding something mover-sizer-based for closing windows (original had something like double-middle-click or something, I think?)
	☐ Config: is it worth keeping .Init()?
		TableList automatic filters - where should those live?
		.initDone/.isInitialized stuff - just used by debug, worth keeping?
			Would it be better to have the "early" debug popup/toast show up based on whether CommonHotkeys has been initialized?
				Would let us potentially make stuff that's NOT early specific to a type of script (i.e. only show it for the main script)
			Could we just replace it with a public flag (or public setter to a private flag, whatever) on Debug, so that the script itself could decide where the cutover point is?
	☐ Consider switching zoom mute toggle over to a click target within the zoom window - would that avoid the "ding" sound?
	☐ CodeSearch: looks like the URL can include the full path now, could we use that to open in client instead of the search approach?
	☐ EpicStudio - add a diffing hotkey that makes it easier to do the same diff to a bunch of different routines
		Could use existing ^d hotkey to get popup, then !e to focus environment and enter the chosen one
		Initial submission would involve a selector popup of environments
	Rework Selector/FlexTable:
		☐ Re-examine SelectorGui/FlexTable - could we simplify out a lot of the extra logic using built-in Gui positioning options?
			https://www.autohotkey.com/docs/commands/Gui.htm#PosSize
				Gui, Margin + AutoSize to avoid needing to keep track of a total height/width for the popup
				wp/hp/x+n/y+n for sizing/positioning relative to last control
				x+m/y+m to use margin value
				xs/ys for "sections" - looks like I could use xs to start a new "row" (use the same X-value as the start of the "section")
					Can use +n/-n for these as well
			If I go through the trouble of doing this, also make index/abbreviation columns resize dynamically
				Would need some way to figure out the max width of all text that WILL BE in a given column
				OR: add all of one column, for the entire super-column, at once - then use xs+n to place the next column, etc.
			Current functionality I'd want to duplicate:
				Popup behavior
					Size to contents (but ideally only to a point, then maybe scroll?)
					No max/min buttons
					Custom background/text colors
					Grayed-out fields when default values (labels as "ghost" text, color changes live)
					Enter to submit
					Esc to cancel
					Choice field focuses on startup
				Content sizing
					10px margin around main content
					Specific padding between elements (5px index-abbrev, 10px abbrev-name, 5px between override fields, 30px between columns)
					Dynamic widths for index/abbrev (if possible - current behavior is 25px index, 50px abbrev) and name (actually dynamic 	right now)
					25px line height (on choices)
					24px field height
					First field width
						If no overrides: full width
						If overrides: index width + abbrev width (+ padding between)
					Override field widths span remaining width equally
					Sections (header + empty line at end)
			Make sure to update Selector/SelectorGui documentation if stuff changes
		☐ The @MinColumnWidth setting is currently used to make sure that field names show up - could we just handle that more automatically instead?
			Somehow measure the width a field would need to be to fit its description comfortably
				Or does that happen automatically if you add it with a value?
			Maybe include an additional buffer on the end?
				Maybe make it optional with an overall setting?
			What about column widths, in a new top-level line like we have for field order/whether to show?
				Could potentially combine it with the existing () line - INDEX-WIDTH, where width is optional (and presumably in pixels?)
